'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.AppInstaller=undefined;exports.createApp=createApp;var _fsExtra=require('fs-extra');var _fsExtra2=_interopRequireDefault(_fsExtra);var _path=require('path');var _path2=_interopRequireDefault(_path);var _dns=require('dns');var _dns2=_interopRequireDefault(_dns);var _child_process=require('child_process');var _tmp=require('tmp');var _tmp2=_interopRequireDefault(_tmp);var _crossSpawn=require('cross-spawn');var _crossSpawn2=_interopRequireDefault(_crossSpawn);var _hyperquest=require('hyperquest');var _hyperquest2=_interopRequireDefault(_hyperquest);var _tarPack=require('tar-pack');var _semver=require('semver');var _semver2=_interopRequireDefault(_semver);var _validateNpmPackageName=require('validate-npm-package-name');var _validateNpmPackageName2=_interopRequireDefault(_validateNpmPackageName);var _consoleOperator=require('./console-operator');var _consoleOperator2=_interopRequireDefault(_consoleOperator);require('../reporter');var _systemTypes=require('../system-types');var _systemTypes2=_interopRequireDefault(_systemTypes);var _constants=require('../constants');var _errors=require('../errors');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}class AppInstaller extends _consoleOperator2.default{constructor(props){super(props,AppInstaller.defaultProps);this.state={root:null,origin:null};this.execSync=_child_process.execSync;this.dnsLookup=_dns2.default.lookup;this.spawn=_crossSpawn2.default}async createApp(){try{this.checkAppName()}catch(err){this.reporter.error(err.message);if(err instanceof _errors.AppNameConflict){this.reporter.info(`Due to the way npm works, the following names are not allowed:\n\n`);err.dependencies.forEach(depName=>{this.reporter.log(`  %c${depName}`,'cyan')})}throw err}this.setState({root:this.resolveApp(this.props.appName)});this.reporter.info(`Creating a new %c${this.props.programName} ${this.props.systemType} `+`%cin %c${this.state.root}`,'cyan','white','green');try{this.checkVersions()}catch(err){this.reporter.error(err.message);if(err instanceof _errors.InvalidVersion){this.reporter.info(`Please update to ${err.props.program} ${err.props.minVersion} `+`or higher.`)}throw err}try{this.checkProjectDir(this.state.root)}catch(err){this.reporter.error(err.message);if(err instanceof _errors.DirectoryConflict){this.reporter.log();var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=err.conflicts[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){const file=_step.value;this.reporter.log(`  - ${file}`)}}catch(err){_didIteratorError=true;_iteratorError=err}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return()}}finally{if(_didIteratorError){throw _iteratorError}}}this.reporter.log();this.reporter.hint('Either try using a new directory name, or remove the files '+'listed above.')}throw err}this.initWithPackageJson(this.props.appName,this.state.root);this.setState({origin:process.cwd()});process.chdir(this.state.root);try{await this.run();this.reporter.log(`:rocket: Created %c${this.props.appName}`,'green');const installCmd=this.shouldUseYarn()?`yarn install`:`npm install`;this.reporter.info(`Now you can run %ccd ./${this.props.appName} && ${installCmd}`,'yellow');this.reporter.log()}catch(err){this.reporter.log();this.reporter.warn('Aborting installation.');if(err instanceof _errors.InvalidVersion&&err.program==='node'){this.reporter.error(`You are running Node ${err.version} `+`while ${err.props.packageName} requires Node ${err.minVersion}.`);this.reporter.hint('Please update your version of Node.')}this.reporter.error(err.message);this.reporter.log();this.cleanup(this.state.root)}}async run(){var _props=this.props;const systemType=_props.systemType,version=_props.version;const packageToInstall=this.getInstallPackage(systemType,version);await this.installPackage(packageToInstall,this.state.root,this.state.origin)}checkAppName(){var _props2=this.props;const appName=_props2.appName,dependencies=_props2.dependencies;const validationResults=(0,_validateNpmPackageName2.default)(appName);if(!validationResults.validForNewPackages){throw new _errors.InvalidNpmName(`${appName} is not a valid npm package name.`)}if(dependencies.indexOf(appName)>=0){throw new _errors.AppNameConflict(`Cannot create a project named ${appName}: `+`a dependency with the same name already exists.`,{dependencies})}return true}checkVersions(){const nodeInfo=this.validateNodeVersion(_constants.NODE_MIN_VERSION);if(!nodeInfo.hasMinVersion){throw new _errors.InvalidVersion({program:'node',minVersion:_constants.NODE_MIN_VERSION,version:nodeInfo.version})}if(!this.shouldUseYarn()){const npmInfo=this.validateNpmVersion(_constants.NPM_MIN_VERSION);if(!npmInfo.hasMinVersion){throw new _errors.InvalidVersion({program:'Npm',minVersion:_constants.NPM_MIN_VERSION,version:npmInfo.version})}}return true}getInstallPackage(systemType,version){let packageToInstall;const appSystem='rear-system-app';const clientSystem='rear-system-client';const serverSystem='rear-system-server';const packageSystem='rear-system-package';switch(systemType){case _systemTypes2.default.app:packageToInstall=appSystem;this.setProps({dependencies:this.props.dependencies.concat([clientSystem,serverSystem])});break;case _systemTypes2.default.server:packageToInstall=serverSystem;break;case _systemTypes2.default.package:packageToInstall=packageSystem;break;default:packageToInstall=clientSystem;break;}let validSemver;const validVersionNames=['latest','next'];if(validVersionNames.includes(version)){validSemver=version}else{validSemver=_semver2.default.valid(version)}if(validSemver){packageToInstall+=`@${validSemver}`}else if(version){packageToInstall=version}this.setProps({dependencies:this.props.dependencies.concat(packageToInstall)});return packageToInstall}async installPackage(packageToInstall,destination,origin){const packageName=await this.getPackageName(packageToInstall);this.reporter.info(`Installing %c${packageName}%c...`,'cyan','white');await this.install();await this.checkNodeVersion(packageName);return await this.init(packageName)}init(packageName){const appPath=this.resolveApp(this.props.appName);const sysRootPath=_path2.default.join(appPath,'node_modules',packageName);const templatePath=_path2.default.join(sysRootPath,'template');if(!_fsExtra2.default.existsSync(templatePath)){throw new _errors.TemplateNotFound(packageName,templatePath)}const readmePath=this.resolveApp('README.md');if(_fsExtra2.default.existsSync(readmePath)){_fsExtra2.default.copySync(readmePath,this.resolveApp('README.old.md'))}_fsExtra2.default.copySync(templatePath,this.state.root);const appPackagePath=_path2.default.join(appPath,'package.json');const sysPackagePath=_path2.default.join(appPath,'.template.json');if(_fsExtra2.default.existsSync(sysPackagePath)){const sysPackageJson=require(sysPackagePath);const appPackageJson=require(appPackagePath);const newPackageJson=Object.assign(appPackageJson,sysPackageJson);_fsExtra2.default.writeFileSync(appPackagePath,JSON.stringify(newPackageJson,null,2));_fsExtra2.default.removeSync(sysPackagePath)}const appGitignore=_path2.default.join(appPath,'gitignore');const appDotGitignore=_path2.default.join(appPath,'.gitignore');try{_fsExtra2.default.moveSync(appGitignore,appDotGitignore)}catch(err){if(err.code==='EEXIST'){const gitignoreContent=_fsExtra2.default.readFileSync(appGitignore);_fsExtra2.default.appendFileSync(appDotGitignore,gitignoreContent);_fsExtra2.default.removeSync(appGitignore)}else{throw err}}}async install(){const isOnline=await this.checkIfOnline();var _getCommand=this.getCommand(this.props.dependencies,this.shouldUseYarn(),this.props.verbose,isOnline);const command=_getCommand.command,args=_getCommand.args;await this.runCommand(command,args)}async runCommand(command,args){let stdio=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'inherit';return new Promise((resolve,reject)=>{const proc=this.spawn(command,args,{stdio});proc.on('close',code=>{if(code!==0){reject(new _errors.CommandFailure({command:`${command} ${args.join(' ')}`}))}resolve()})})}getCommand(dependencies,useYarn,verbose,isOnline){let command,args;if(useYarn){command='yarnpkg';args=['add','--exact'];if(!isOnline){this.reporter.warn('You appear to be offline. Falling back to the local Yarn cache.');args.push('--offline')}}else{command='npm';args=['install','--save','--save-exact']}args=args.concat(dependencies||[]);if(verbose)args.push('--verbose');return{command,args}}async getPackageName(installPackage){if(installPackage.indexOf('.tgz')>-1){let tmp;try{tmp=await this.getTemporaryDirectory();const stream=/^http/.test(installPackage)?(0,_hyperquest2.default)(installPackage):_fsExtra2.default.createReadStream(installPackage);const tmpDir=await this.extractStream(stream,tmp.tmpdir);const packageName=require(_path2.default.join(tmpDir,'package.json')).name;return Promise.resolve(packageName)}catch(err){this.reporter.warn(`Could not extract the package name from the archive: ${err.message}`);const matches=installPackage.match(/^.+\/(.+?)(?:-\d+.+)?\.tgz$/);if(Array.isArray(matches)&&matches.length>1){const assumedProjectName=matches[1];this.reporter.info(`Based on the filename, assuming it is "%c${assumedProjectName}%C"`,'cyan','white');if(typeof tmp!=='undefined')tmp.cleanup();return Promise.resolve(assumedProjectName)}if(typeof tmp!=='undefined')tmp.cleanup();return Promise.reject('Unable to resolve project name from package.')}}if(installPackage.indexOf('git+')===0){const matches=installPackage.match(/([^/]+)\.git(#.*)?$/);if(Array.isArray(matches)&&matches.length>1){const packageName=matches[1];return Promise.resolve(packageName)}return Promise.reject('Unable to resolve package name from git repository.')}if(installPackage.match(/.+@/)){return Promise.resolve(installPackage.charAt(0)+installPackage.substr(1).split('@')[0])}return Promise.resolve(installPackage)}cleanup(directory){let currentFiles;try{currentFiles=_fsExtra2.default.readdirSync(_path2.default.join(directory))}catch(err){if(err.code==='ENOENT')return;throw err}currentFiles.forEach(file=>{_constants.KNOWN_GENERATED_FILES.forEach(fileToMatch=>{if(fileToMatch.match(/.log/g)&&file.indexOf(fileToMatch)===0||file===fileToMatch){this.reporter.info(`Deleting generated file... %c${file}`,'cyan');_fsExtra2.default.removeSync(_path2.default.join(directory,file))}});const remainingFiles=_fsExtra2.default.readdirSync(_path2.default.join(directory));if(!remainingFiles.length){this.reporter.info(`Deleting %c${this.props.appName} /%c from `+`%c${_path2.default.resolve(directory,'..')}`,'cyan','white','cyan');process.chdir(_path2.default.resolve(directory,'..'));_fsExtra2.default.removeSync(_path2.default.join(directory))}})}async extractStream(stream,dest){return new Promise((resolve,reject)=>{stream.pipe((0,_tarPack.unpack)(dest,err=>{if(err){reject(err)}else{resolve(dest)}}))})}async getTemporaryDirectory(){return new Promise((resolve,reject)=>{_tmp2.default.dir({unsafeCleanup:true},(err,tmpdir,callback)=>{if(err){reject(err)}else{resolve({tmpdir:tmpdir,cleanup:()=>{try{callback()}catch(ignored){}}})}})})}async checkIfOnline(){if(!this.shouldUseYarn()){return Promise.resolve(true)}return new Promise(resolve=>{this.dnsLookup('registry.yarnpkg.com',err=>{resolve(err===null)})})}initWithPackageJson(appName,root){_fsExtra2.default.ensureDirSync(root);const packageJson={name:appName,version:'0.1.0',private:true};_fsExtra2.default.writeFileSync(_path2.default.join(root,'package.json'),JSON.stringify(packageJson,null,2))}checkProjectDir(root){let conflicts;try{conflicts=_fsExtra2.default.readdirSync(root).filter(file=>!_constants.VALID_FILES.includes(file))}catch(err){if(err.code==='ENOENT'){return true}throw err}if(conflicts.length===0)return true;throw new _errors.DirectoryConflict(`The directory ${root} contains files that could conflict`,{directory:root,conflicts})}checkNodeVersion(packageName){const packageJsonPath=this.resolveApp(this.props.appName,'node_modules',packageName,'package.json');const packageJson=require(packageJsonPath);if(!packageJson.engines||!packageJson.engines.node){return}var _process=process;const version=_process.version;const minVersion=packageJson.engines.node;if(!_semver2.default.satisfies(process.version,packageJson.engines.node)){throw new _errors.InvalidVersion({program:'Node',minVersion,version,packageName})}}validateNodeVersion(minVersion){const hasMinVersion=_semver2.default.satisfies(process.version,'>='+minVersion);const version=process.version;return{hasMinVersion,version}}validateNpmVersion(minVersion){let hasMinVersion=false;let version='unknown';try{version=this.execSync('npm --version').toString().trim();hasMinVersion=_semver2.default.gte(version,minVersion)}catch(err){}return{hasMinVersion,version}}shouldUseYarn(){if(!this.state.useYarn){try{this.setState({useYarn:_fsExtra2.default.existsSync('yarn.lock')})}catch(err){this.setState({useYarn:false})}}return this.state.useYarn}}exports.AppInstaller=AppInstaller;AppInstaller.defaultProps={programName:'rear',verbose:false,version:'',dependencies:[]};async function createApp(props){const installer=new AppInstaller(props);return installer.createApp()}exports.default=createApp;