'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.ProgramRunner=undefined;var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i['return'])_i['return']()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr)){return arr}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i)}else{throw new TypeError('Invalid attempt to destructure non-iterable instance')}}}();exports.runProgram=runProgram;var _fsExtra=require('fs-extra');var _fsExtra2=_interopRequireDefault(_fsExtra);var _path=require('path');var _path2=_interopRequireDefault(_path);var _consoleOperator=require('./console-operator');var _consoleOperator2=_interopRequireDefault(_consoleOperator);var _config=require('./config');var _config2=_interopRequireDefault(_config);require('./reporter');var _errors=require('./errors');var _child_process=require('child_process');var _leven=require('leven');var _leven2=_interopRequireDefault(_leven);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}class ProgramRunner extends _consoleOperator2.default{constructor(props){super(props);this.state={binCommands:[],scripts:new Map,cmdHints:{},cmds:[],visistedBinDirs:new Set}}async run(){await this.initBinCommands();await this.initScriptsCommands();this.buildCommands();await this.execCommand()}async execCommand(){var _props=this.props;const programName=_props.programName,args=_props.args;var _state=this.state;const cmds=_state.cmds,scripts=_state.scripts;if(cmds.length){var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=cmds[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){const _ref=_step.value;var _ref2=_slicedToArray(_ref,2);const stage=_ref2[0];const cmd=_ref2[1];this.printHeader(stage);return await this.runCommand(cmd,args)}}catch(err){_didIteratorError=true;_iteratorError=err}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return()}}finally{if(_didIteratorError){throw _iteratorError}}}}else{let suggestion;var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=scripts[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){const commandName=_step2.value;const steps=(0,_leven2.default)(commandName,programName);if(steps<2){suggestion=commandName}}}catch(err){_didIteratorError2=true;_iteratorError2=err}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return()}}finally{if(_didIteratorError2){throw _iteratorError2}}}return Promise.reject(new _errors.CommandNotFound(programName,suggestion))}}async initBinCommands(){const binDir=_config2.default.binDir;var _state2=this.state;const binCommands=_state2.binCommands,scripts=_state2.scripts;if(!this.state.visistedBinDirs.has(binDir)){if(await _fsExtra2.default.exists(binDir)){const programs=await _fsExtra2.default.readdir(binDir);var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=programs[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){const name=_step3.value;binCommands.push(name);scripts[name]=`"${_path2.default.join(binDir,name)}"`}}catch(err){_didIteratorError3=true;_iteratorError3=err}finally{try{if(!_iteratorNormalCompletion3&&_iterator3.return){_iterator3.return()}}finally{if(_didIteratorError3){throw _iteratorError3}}}}this.state.visistedBinDirs.add(binDir)}}async initScriptsCommands(){const packageJson=this.getAppPackageJson();if(packageJson!==null&&packageJson.hasOwnProperty('scripts')){const pkgScripts=packageJson.scripts;this.setState({pkgScripts});const pkgCommands=Object.keys(pkgScripts).sort();var _iteratorNormalCompletion4=true;var _didIteratorError4=false;var _iteratorError4=undefined;try{for(var _iterator4=pkgCommands[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4=(_step4=_iterator4.next()).done);_iteratorNormalCompletion4=true){const cmd=_step4.value;this.state.cmdHints[cmd]=pkgScripts[cmd]||''}}catch(err){_didIteratorError4=true;_iteratorError4=err}finally{try{if(!_iteratorNormalCompletion4&&_iterator4.return){_iterator4.return()}}finally{if(_didIteratorError4){throw _iteratorError4}}}this.setState({scripts:Object.assign(this.state.scripts,pkgScripts)})}}buildCommands(){const programName=this.props.programName;var _state3=this.state;const pkgScripts=_state3.pkgScripts,scripts=_state3.scripts,cmds=_state3.cmds;if(pkgScripts&&programName in pkgScripts){const preCommand=`pre${programName}`;const postCommand=`post${programName}`;if(preCommand in pkgScripts){cmds.push([preCommand,pkgScripts[preCommand]])}cmds.push([programName,scripts[programName]]);if(postCommand in pkgScripts){cmds.push([postCommand,pkgScripts[postCommand]])}}else if(scripts[programName]){cmds.push([programName,scripts[programName]])}}async runCommand(cmd){let args=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];let stdio=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'inherit';return new Promise((resolve,reject)=>{const cmdArgs=this.joinArgs(args);const command=`${cmd} ${cmdArgs}`.trim();try{(0,_child_process.execSync)(command,{stdio});resolve()}catch(err){reject(err)}})}joinArgs(args){return args.reduce((joinedArgs,arg)=>joinedArgs+' "'+arg.replace(/"/g,'\\"')+'"','')}getAppPackageJson(){try{const packageJson=this.resolveApp('package.json');return require(packageJson)}catch(err){}return null}}exports.ProgramRunner=ProgramRunner;async function runProgram(programName){for(var _len=arguments.length,args=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key]}const programRunner=new ProgramRunner({programName,args});return programRunner.run()}exports.default=runProgram;